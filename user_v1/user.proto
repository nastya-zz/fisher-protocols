syntax = "proto3";

package user_v1;

option go_package = "protos/user_v1/user.proto;user_v1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

service UserV1 {
  rpc GetProfile(GetProfileRequest) returns (GetProfileResponse) {
    option (google.api.http) = {
      get : "/v1/users/{id}/profile"
    };
  }
  rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse) {
    option (google.api.http) = {
      put : "/v1/users/profile"
      body : "*"
    };
  }
  rpc GetSettings(GetSettingsRequest) returns (GetSettingsResponse) {
    option (google.api.http) = {
      get : "/v1/users/{id}/settings"
    };
  }
  rpc UpdateSettings(UpdateSettingsRequest) returns (UpdateSettingsResponse) {
    option (google.api.http) = {
      put : "/v1/users/settings"
      body : "*"
    };
  }
  rpc ResetSettings(ResetSettingsRequest) returns (ResetSettingsResponse) {
    option (google.api.http) = {
      post : "/v1/users/settings/reset"
    };
  }
  rpc GetSubscriptions(GetSubscriptionsRequest)
      returns (GetSubscriptionsResponse) {
    option (google.api.http) = {
      get : "/v1/users/{id}/subscriptions"
    };
  }
  rpc Subscribe(SubscribeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/users/subscribe/{subscription_id}"
    };
  }
  rpc UnSubscribe(SubscribeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/v1/users/subscribe/{subscription_id}"
    };
  }
  rpc UploadAvatar(UploadAvatarRequest) returns (UploadAvatarResponse) {
    option (google.api.http) = {
      post : "/v1/users/avatar"
      body : "*"
    };
  }
  rpc RemoveAvatar(RemoveAvatarRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/v1/users/avatar"
    };
  }
}

message UserProfile {
  string name = 1;
  string email = 2;
  string avatar_path = 3;
  string bio = 4;
  int32 experience_level = 5;
  bool is_verified = 6;
  bool is_public = 7;
  google.protobuf.Timestamp created_at = 8;
  string id = 9;
}
message GetProfileRequest { string id = 1; }
message GetProfileResponse { UserProfile profile = 1; }

// user_id берется из JWT токена через grpc-gateway metadata
message UpdateProfile {
  google.protobuf.StringValue name = 1;
  google.protobuf.StringValue email = 2;
  google.protobuf.StringValue bio = 3;
  google.protobuf.StringValue avatar_path = 4;
  google.protobuf.BoolValue is_public = 5;
}
message UpdateProfileRequest { UpdateProfile info = 1; }
message UpdateProfileResponse { UserProfile profile = 1; }

message SubscriptionUser {
  string id = 1;
  string name = 2;
  string avatar_path = 3;
}
message GetSubscriptionsRequest { string id = 1; }
message GetSubscriptionsResponse {
  repeated SubscriptionUser subscriptions = 1;
  repeated SubscriptionUser subscribers = 2;
}

// user_id берется из JWT токена через grpc-gateway metadata
message SubscribeRequest { string subscription_id = 1; }

enum Language {
  RU = 0;
  ENG = 1;
}
enum Availability {
  PUBLIC = 0;
  PRIVATE = 1;
}
message AccountSettings {
  Language language = 1;
  Availability availability = 2;
}
message GetSettingsRequest { string id = 1; }
message GetSettingsResponse { AccountSettings settings = 1; }
// user_id берется из JWT токена через grpc-gateway metadata
message UpdateSettingsRequest { AccountSettings settings_info = 1; }
message UpdateSettingsResponse { AccountSettings settings = 1; }
// user_id берется из JWT токена через grpc-gateway metadata
message ResetSettingsRequest {}
message ResetSettingsResponse { AccountSettings settings = 1; }

// userId берется из JWT токена через grpc-gateway metadata
message UploadAvatarRequest {
  bytes image = 1;
  string filename = 2;
}

message UploadAvatarResponse { string link = 1; }

// userId берется из JWT токена через grpc-gateway metadata
message RemoveAvatarRequest { string filename = 1; }
