// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: feed.proto

package feed_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedV1Client is the client API for FeedV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedV1Client interface {
	// Получение персональной ленты подписок пользователя
	GetFeed(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error)
	// Получение ленты постов по геолокации (рыбные места рядом)
	GetLocationFeed(ctx context.Context, in *GetLocationFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error)
	// Получение трендовых постов (популярное в регионе/мире)
	GetTrendingFeed(ctx context.Context, in *GetTrendingFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error)
	// Обновление кэша ленты пользователя (внутренний метод)
	RefreshUserFeed(ctx context.Context, in *RefreshUserFeedRequest, opts ...grpc.CallOption) (*RefreshUserFeedResponse, error)
	// Обработка события создания поста (внутренний метод для event-driven)
	OnPostCreated(ctx context.Context, in *PostCreatedEvent, opts ...grpc.CallOption) (*PostCreatedEventResponse, error)
	// Получение рекомендаций на основе интересов пользователя
	GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (*GetFeedResponse, error)
}

type feedV1Client struct {
	cc grpc.ClientConnInterface
}

func NewFeedV1Client(cc grpc.ClientConnInterface) FeedV1Client {
	return &feedV1Client{cc}
}

func (c *feedV1Client) GetFeed(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error) {
	out := new(GetFeedResponse)
	err := c.cc.Invoke(ctx, "/feed_v1.FeedV1/GetFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedV1Client) GetLocationFeed(ctx context.Context, in *GetLocationFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error) {
	out := new(GetFeedResponse)
	err := c.cc.Invoke(ctx, "/feed_v1.FeedV1/GetLocationFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedV1Client) GetTrendingFeed(ctx context.Context, in *GetTrendingFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error) {
	out := new(GetFeedResponse)
	err := c.cc.Invoke(ctx, "/feed_v1.FeedV1/GetTrendingFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedV1Client) RefreshUserFeed(ctx context.Context, in *RefreshUserFeedRequest, opts ...grpc.CallOption) (*RefreshUserFeedResponse, error) {
	out := new(RefreshUserFeedResponse)
	err := c.cc.Invoke(ctx, "/feed_v1.FeedV1/RefreshUserFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedV1Client) OnPostCreated(ctx context.Context, in *PostCreatedEvent, opts ...grpc.CallOption) (*PostCreatedEventResponse, error) {
	out := new(PostCreatedEventResponse)
	err := c.cc.Invoke(ctx, "/feed_v1.FeedV1/OnPostCreated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedV1Client) GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (*GetFeedResponse, error) {
	out := new(GetFeedResponse)
	err := c.cc.Invoke(ctx, "/feed_v1.FeedV1/GetRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedV1Server is the server API for FeedV1 service.
// All implementations must embed UnimplementedFeedV1Server
// for forward compatibility
type FeedV1Server interface {
	// Получение персональной ленты подписок пользователя
	GetFeed(context.Context, *GetFeedRequest) (*GetFeedResponse, error)
	// Получение ленты постов по геолокации (рыбные места рядом)
	GetLocationFeed(context.Context, *GetLocationFeedRequest) (*GetFeedResponse, error)
	// Получение трендовых постов (популярное в регионе/мире)
	GetTrendingFeed(context.Context, *GetTrendingFeedRequest) (*GetFeedResponse, error)
	// Обновление кэша ленты пользователя (внутренний метод)
	RefreshUserFeed(context.Context, *RefreshUserFeedRequest) (*RefreshUserFeedResponse, error)
	// Обработка события создания поста (внутренний метод для event-driven)
	OnPostCreated(context.Context, *PostCreatedEvent) (*PostCreatedEventResponse, error)
	// Получение рекомендаций на основе интересов пользователя
	GetRecommendations(context.Context, *GetRecommendationsRequest) (*GetFeedResponse, error)
	mustEmbedUnimplementedFeedV1Server()
}

// UnimplementedFeedV1Server must be embedded to have forward compatible implementations.
type UnimplementedFeedV1Server struct {
}

func (UnimplementedFeedV1Server) GetFeed(context.Context, *GetFeedRequest) (*GetFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedFeedV1Server) GetLocationFeed(context.Context, *GetLocationFeedRequest) (*GetFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationFeed not implemented")
}
func (UnimplementedFeedV1Server) GetTrendingFeed(context.Context, *GetTrendingFeedRequest) (*GetFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrendingFeed not implemented")
}
func (UnimplementedFeedV1Server) RefreshUserFeed(context.Context, *RefreshUserFeedRequest) (*RefreshUserFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshUserFeed not implemented")
}
func (UnimplementedFeedV1Server) OnPostCreated(context.Context, *PostCreatedEvent) (*PostCreatedEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPostCreated not implemented")
}
func (UnimplementedFeedV1Server) GetRecommendations(context.Context, *GetRecommendationsRequest) (*GetFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendations not implemented")
}
func (UnimplementedFeedV1Server) mustEmbedUnimplementedFeedV1Server() {}

// UnsafeFeedV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedV1Server will
// result in compilation errors.
type UnsafeFeedV1Server interface {
	mustEmbedUnimplementedFeedV1Server()
}

func RegisterFeedV1Server(s grpc.ServiceRegistrar, srv FeedV1Server) {
	s.RegisterService(&FeedV1_ServiceDesc, srv)
}

func _FeedV1_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedV1Server).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed_v1.FeedV1/GetFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedV1Server).GetFeed(ctx, req.(*GetFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedV1_GetLocationFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedV1Server).GetLocationFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed_v1.FeedV1/GetLocationFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedV1Server).GetLocationFeed(ctx, req.(*GetLocationFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedV1_GetTrendingFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrendingFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedV1Server).GetTrendingFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed_v1.FeedV1/GetTrendingFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedV1Server).GetTrendingFeed(ctx, req.(*GetTrendingFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedV1_RefreshUserFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshUserFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedV1Server).RefreshUserFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed_v1.FeedV1/RefreshUserFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedV1Server).RefreshUserFeed(ctx, req.(*RefreshUserFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedV1_OnPostCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCreatedEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedV1Server).OnPostCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed_v1.FeedV1/OnPostCreated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedV1Server).OnPostCreated(ctx, req.(*PostCreatedEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedV1_GetRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedV1Server).GetRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed_v1.FeedV1/GetRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedV1Server).GetRecommendations(ctx, req.(*GetRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedV1_ServiceDesc is the grpc.ServiceDesc for FeedV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feed_v1.FeedV1",
	HandlerType: (*FeedV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeed",
			Handler:    _FeedV1_GetFeed_Handler,
		},
		{
			MethodName: "GetLocationFeed",
			Handler:    _FeedV1_GetLocationFeed_Handler,
		},
		{
			MethodName: "GetTrendingFeed",
			Handler:    _FeedV1_GetTrendingFeed_Handler,
		},
		{
			MethodName: "RefreshUserFeed",
			Handler:    _FeedV1_RefreshUserFeed_Handler,
		},
		{
			MethodName: "OnPostCreated",
			Handler:    _FeedV1_OnPostCreated_Handler,
		},
		{
			MethodName: "GetRecommendations",
			Handler:    _FeedV1_GetRecommendations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feed.proto",
}
